# coding: utf-8

"""
    Eco Game API

    First API draft for Eco. Heavy work in progress and subject to changes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ecoserver.configuration import Configuration


class EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layer_name': 'str',
        'layer_display_name': 'str',
        'summary': 'str',
        'tooltip': 'str',
        'category': 'str',
        'display_row': 'int'
    }

    attribute_map = {
        'layer_name': 'layerName',
        'layer_display_name': 'layerDisplayName',
        'summary': 'summary',
        'tooltip': 'tooltip',
        'category': 'category',
        'display_row': 'displayRow'
    }

    def __init__(self, layer_name=None, layer_display_name=None, summary=None, tooltip=None, category=None, display_row=None, _configuration=None):  # noqa: E501
        """EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._layer_name = None
        self._layer_display_name = None
        self._summary = None
        self._tooltip = None
        self._category = None
        self._display_row = None
        self.discriminator = None

        if layer_name is not None:
            self.layer_name = layer_name
        if layer_display_name is not None:
            self.layer_display_name = layer_display_name
        if summary is not None:
            self.summary = summary
        if tooltip is not None:
            self.tooltip = tooltip
        if category is not None:
            self.category = category
        if display_row is not None:
            self.display_row = display_row

    @property
    def layer_name(self):
        """Gets the layer_name of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501


        :return: The layer_name of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :rtype: str
        """
        return self._layer_name

    @layer_name.setter
    def layer_name(self, layer_name):
        """Sets the layer_name of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.


        :param layer_name: The layer_name of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :type: str
        """

        self._layer_name = layer_name

    @property
    def layer_display_name(self):
        """Gets the layer_display_name of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501


        :return: The layer_display_name of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :rtype: str
        """
        return self._layer_display_name

    @layer_display_name.setter
    def layer_display_name(self, layer_display_name):
        """Sets the layer_display_name of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.


        :param layer_display_name: The layer_display_name of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :type: str
        """

        self._layer_display_name = layer_display_name

    @property
    def summary(self):
        """Gets the summary of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501


        :return: The summary of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.


        :param summary: The summary of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def tooltip(self):
        """Gets the tooltip of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501


        :return: The tooltip of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.


        :param tooltip: The tooltip of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    @property
    def category(self):
        """Gets the category of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501


        :return: The category of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.


        :param category: The category of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def display_row(self):
        """Gets the display_row of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501


        :return: The display_row of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :rtype: int
        """
        return self._display_row

    @display_row.setter
    def display_row(self, display_row):
        """Sets the display_row of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.


        :param display_row: The display_row of this EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO.  # noqa: E501
        :type: int
        """

        self._display_row = display_row

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO):
            return True

        return self.to_dict() != other.to_dict()
