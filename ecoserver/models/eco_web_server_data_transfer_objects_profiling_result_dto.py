# coding: utf-8

"""
    Eco Game API

    First API draft for Eco. Heavy work in progress and subject to changes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ecoserver.configuration import Configuration


class EcoWebServerDataTransferObjectsProfilingResultDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'size': 'int',
        'created_at': 'str'
    }

    attribute_map = {
        'name': 'name',
        'size': 'size',
        'created_at': 'createdAt'
    }

    def __init__(self, name=None, size=None, created_at=None, _configuration=None):  # noqa: E501
        """EcoWebServerDataTransferObjectsProfilingResultDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._size = None
        self._created_at = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if created_at is not None:
            self.created_at = created_at

    @property
    def name(self):
        """Gets the name of this EcoWebServerDataTransferObjectsProfilingResultDTO.  # noqa: E501


        :return: The name of this EcoWebServerDataTransferObjectsProfilingResultDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EcoWebServerDataTransferObjectsProfilingResultDTO.


        :param name: The name of this EcoWebServerDataTransferObjectsProfilingResultDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this EcoWebServerDataTransferObjectsProfilingResultDTO.  # noqa: E501


        :return: The size of this EcoWebServerDataTransferObjectsProfilingResultDTO.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this EcoWebServerDataTransferObjectsProfilingResultDTO.


        :param size: The size of this EcoWebServerDataTransferObjectsProfilingResultDTO.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def created_at(self):
        """Gets the created_at of this EcoWebServerDataTransferObjectsProfilingResultDTO.  # noqa: E501


        :return: The created_at of this EcoWebServerDataTransferObjectsProfilingResultDTO.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EcoWebServerDataTransferObjectsProfilingResultDTO.


        :param created_at: The created_at of this EcoWebServerDataTransferObjectsProfilingResultDTO.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcoWebServerDataTransferObjectsProfilingResultDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsProfilingResultDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsProfilingResultDTO):
            return True

        return self.to_dict() != other.to_dict()
