# coding: utf-8

"""
    Eco Game API

    First API draft for Eco. Heavy work in progress and subject to changes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ecoserver.configuration import Configuration


class EcoWebServerDataTransferObjectsMapDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layer_selected': 'str',
        'frame': 'int',
        'time_start': 'float',
        'time_end': 'float',
        'play_speed': 'float',
        'current_time': 'float',
        'flat': 'bool',
        'pause': 'bool',
        'cam_pos': 'EcoWebServerDataTransferObjectsVector3DTO'
    }

    attribute_map = {
        'layer_selected': 'layerSelected',
        'frame': 'frame',
        'time_start': 'timeStart',
        'time_end': 'timeEnd',
        'play_speed': 'playSpeed',
        'current_time': 'currentTime',
        'flat': 'flat',
        'pause': 'pause',
        'cam_pos': 'camPos'
    }

    def __init__(self, layer_selected=None, frame=None, time_start=None, time_end=None, play_speed=None, current_time=None, flat=None, pause=None, cam_pos=None, _configuration=None):  # noqa: E501
        """EcoWebServerDataTransferObjectsMapDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._layer_selected = None
        self._frame = None
        self._time_start = None
        self._time_end = None
        self._play_speed = None
        self._current_time = None
        self._flat = None
        self._pause = None
        self._cam_pos = None
        self.discriminator = None

        if layer_selected is not None:
            self.layer_selected = layer_selected
        if frame is not None:
            self.frame = frame
        if time_start is not None:
            self.time_start = time_start
        if time_end is not None:
            self.time_end = time_end
        if play_speed is not None:
            self.play_speed = play_speed
        if current_time is not None:
            self.current_time = current_time
        if flat is not None:
            self.flat = flat
        if pause is not None:
            self.pause = pause
        if cam_pos is not None:
            self.cam_pos = cam_pos

    @property
    def layer_selected(self):
        """Gets the layer_selected of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501


        :return: The layer_selected of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :rtype: str
        """
        return self._layer_selected

    @layer_selected.setter
    def layer_selected(self, layer_selected):
        """Sets the layer_selected of this EcoWebServerDataTransferObjectsMapDTO.


        :param layer_selected: The layer_selected of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :type: str
        """

        self._layer_selected = layer_selected

    @property
    def frame(self):
        """Gets the frame of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501


        :return: The frame of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :rtype: int
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """Sets the frame of this EcoWebServerDataTransferObjectsMapDTO.


        :param frame: The frame of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :type: int
        """

        self._frame = frame

    @property
    def time_start(self):
        """Gets the time_start of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501


        :return: The time_start of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :rtype: float
        """
        return self._time_start

    @time_start.setter
    def time_start(self, time_start):
        """Sets the time_start of this EcoWebServerDataTransferObjectsMapDTO.


        :param time_start: The time_start of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :type: float
        """

        self._time_start = time_start

    @property
    def time_end(self):
        """Gets the time_end of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501


        :return: The time_end of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :rtype: float
        """
        return self._time_end

    @time_end.setter
    def time_end(self, time_end):
        """Sets the time_end of this EcoWebServerDataTransferObjectsMapDTO.


        :param time_end: The time_end of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :type: float
        """

        self._time_end = time_end

    @property
    def play_speed(self):
        """Gets the play_speed of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501


        :return: The play_speed of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :rtype: float
        """
        return self._play_speed

    @play_speed.setter
    def play_speed(self, play_speed):
        """Sets the play_speed of this EcoWebServerDataTransferObjectsMapDTO.


        :param play_speed: The play_speed of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :type: float
        """

        self._play_speed = play_speed

    @property
    def current_time(self):
        """Gets the current_time of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501


        :return: The current_time of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :rtype: float
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this EcoWebServerDataTransferObjectsMapDTO.


        :param current_time: The current_time of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :type: float
        """

        self._current_time = current_time

    @property
    def flat(self):
        """Gets the flat of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501


        :return: The flat of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :rtype: bool
        """
        return self._flat

    @flat.setter
    def flat(self, flat):
        """Sets the flat of this EcoWebServerDataTransferObjectsMapDTO.


        :param flat: The flat of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :type: bool
        """

        self._flat = flat

    @property
    def pause(self):
        """Gets the pause of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501


        :return: The pause of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :rtype: bool
        """
        return self._pause

    @pause.setter
    def pause(self, pause):
        """Sets the pause of this EcoWebServerDataTransferObjectsMapDTO.


        :param pause: The pause of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :type: bool
        """

        self._pause = pause

    @property
    def cam_pos(self):
        """Gets the cam_pos of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501


        :return: The cam_pos of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :rtype: EcoWebServerDataTransferObjectsVector3DTO
        """
        return self._cam_pos

    @cam_pos.setter
    def cam_pos(self, cam_pos):
        """Sets the cam_pos of this EcoWebServerDataTransferObjectsMapDTO.


        :param cam_pos: The cam_pos of this EcoWebServerDataTransferObjectsMapDTO.  # noqa: E501
        :type: EcoWebServerDataTransferObjectsVector3DTO
        """

        self._cam_pos = cam_pos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcoWebServerDataTransferObjectsMapDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsMapDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsMapDTO):
            return True

        return self.to_dict() != other.to_dict()
