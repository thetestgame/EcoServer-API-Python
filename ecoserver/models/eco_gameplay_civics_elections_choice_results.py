# coding: utf-8

"""
    Eco Game API

    First API draft for Eco. Heavy work in progress and subject to changes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ecoserver.configuration import Configuration


class EcoGameplayCivicsElectionsChoiceResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'choice_id': 'int',
        'marked_up_name': 'str',
        'votes_per_round': 'list[int]',
        'votes': 'int',
        'simple_result_votes': 'int'
    }

    attribute_map = {
        'choice_id': 'choiceID',
        'marked_up_name': 'markedUpName',
        'votes_per_round': 'votesPerRound',
        'votes': 'votes',
        'simple_result_votes': 'simpleResultVotes'
    }

    def __init__(self, choice_id=None, marked_up_name=None, votes_per_round=None, votes=None, simple_result_votes=None, _configuration=None):  # noqa: E501
        """EcoGameplayCivicsElectionsChoiceResults - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._choice_id = None
        self._marked_up_name = None
        self._votes_per_round = None
        self._votes = None
        self._simple_result_votes = None
        self.discriminator = None

        if choice_id is not None:
            self.choice_id = choice_id
        if marked_up_name is not None:
            self.marked_up_name = marked_up_name
        if votes_per_round is not None:
            self.votes_per_round = votes_per_round
        if votes is not None:
            self.votes = votes
        if simple_result_votes is not None:
            self.simple_result_votes = simple_result_votes

    @property
    def choice_id(self):
        """Gets the choice_id of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501


        :return: The choice_id of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501
        :rtype: int
        """
        return self._choice_id

    @choice_id.setter
    def choice_id(self, choice_id):
        """Sets the choice_id of this EcoGameplayCivicsElectionsChoiceResults.


        :param choice_id: The choice_id of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501
        :type: int
        """

        self._choice_id = choice_id

    @property
    def marked_up_name(self):
        """Gets the marked_up_name of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501


        :return: The marked_up_name of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501
        :rtype: str
        """
        return self._marked_up_name

    @marked_up_name.setter
    def marked_up_name(self, marked_up_name):
        """Sets the marked_up_name of this EcoGameplayCivicsElectionsChoiceResults.


        :param marked_up_name: The marked_up_name of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501
        :type: str
        """

        self._marked_up_name = marked_up_name

    @property
    def votes_per_round(self):
        """Gets the votes_per_round of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501


        :return: The votes_per_round of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501
        :rtype: list[int]
        """
        return self._votes_per_round

    @votes_per_round.setter
    def votes_per_round(self, votes_per_round):
        """Sets the votes_per_round of this EcoGameplayCivicsElectionsChoiceResults.


        :param votes_per_round: The votes_per_round of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501
        :type: list[int]
        """

        self._votes_per_round = votes_per_round

    @property
    def votes(self):
        """Gets the votes of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501


        :return: The votes of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this EcoGameplayCivicsElectionsChoiceResults.


        :param votes: The votes of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501
        :type: int
        """

        self._votes = votes

    @property
    def simple_result_votes(self):
        """Gets the simple_result_votes of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501


        :return: The simple_result_votes of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501
        :rtype: int
        """
        return self._simple_result_votes

    @simple_result_votes.setter
    def simple_result_votes(self, simple_result_votes):
        """Sets the simple_result_votes of this EcoGameplayCivicsElectionsChoiceResults.


        :param simple_result_votes: The simple_result_votes of this EcoGameplayCivicsElectionsChoiceResults.  # noqa: E501
        :type: int
        """

        self._simple_result_votes = simple_result_votes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcoGameplayCivicsElectionsChoiceResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcoGameplayCivicsElectionsChoiceResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcoGameplayCivicsElectionsChoiceResults):
            return True

        return self.to_dict() != other.to_dict()
