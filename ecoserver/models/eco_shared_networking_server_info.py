# coding: utf-8

"""
    Eco Game API

    First API draft for Eco. Heavy work in progress and subject to changes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ecoserver.configuration import Configuration


class EcoSharedNetworkingServerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'address': 'str',
        'external': 'bool',
        'game_port': 'int',
        'web_port': 'int',
        'is_lan': 'bool',
        'description': 'str',
        'detailed_description': 'str',
        'category': 'EcoSharedStatesServerCategory',
        'online_players': 'int',
        'total_players': 'int',
        'online_players_names': 'list[str]',
        'admin_online': 'bool',
        'time_since_start': 'float',
        'time_left': 'float',
        'animals': 'int',
        'plants': 'int',
        'laws': 'int',
        'world_size': 'str',
        'version': 'str',
        'economy_desc': 'str',
        'skill_specialization': 'str',
        'skill_specialization_setting': 'EcoSharedNetworkingSkillSpecializationSetting',
        'world_objective': 'str',
        'language': 'str',
        'has_password': 'bool',
        'has_meteor': 'bool',
        'distribution_station_items': 'str',
        'playtimes': 'str',
        'discord_address': 'str',
        'is_paused': 'bool',
        'active_and_online_players': 'int',
        'peak_active_players': 'int',
        'max_active_players': 'int',
        'exhaustion_after_hours': 'float',
        'is_limiting_hours': 'bool',
        'server_achievements': 'list[str]',
        'relay_address': 'str',
        'access': 'str',
        'join_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'address': 'address',
        'external': 'external',
        'game_port': 'gamePort',
        'web_port': 'webPort',
        'is_lan': 'isLAN',
        'description': 'description',
        'detailed_description': 'detailedDescription',
        'category': 'category',
        'online_players': 'onlinePlayers',
        'total_players': 'totalPlayers',
        'online_players_names': 'onlinePlayersNames',
        'admin_online': 'adminOnline',
        'time_since_start': 'timeSinceStart',
        'time_left': 'timeLeft',
        'animals': 'animals',
        'plants': 'plants',
        'laws': 'laws',
        'world_size': 'worldSize',
        'version': 'version',
        'economy_desc': 'economyDesc',
        'skill_specialization': 'skillSpecialization',
        'skill_specialization_setting': 'skillSpecializationSetting',
        'world_objective': 'worldObjective',
        'language': 'language',
        'has_password': 'hasPassword',
        'has_meteor': 'hasMeteor',
        'distribution_station_items': 'distributionStationItems',
        'playtimes': 'playtimes',
        'discord_address': 'discordAddress',
        'is_paused': 'isPaused',
        'active_and_online_players': 'activeAndOnlinePlayers',
        'peak_active_players': 'peakActivePlayers',
        'max_active_players': 'maxActivePlayers',
        'exhaustion_after_hours': 'exhaustionAfterHours',
        'is_limiting_hours': 'isLimitingHours',
        'server_achievements': 'serverAchievements',
        'relay_address': 'relayAddress',
        'access': 'access',
        'join_url': 'joinUrl'
    }

    def __init__(self, id=None, name=None, address=None, external=None, game_port=None, web_port=None, is_lan=None, description=None, detailed_description=None, category=None, online_players=None, total_players=None, online_players_names=None, admin_online=None, time_since_start=None, time_left=None, animals=None, plants=None, laws=None, world_size=None, version=None, economy_desc=None, skill_specialization=None, skill_specialization_setting=None, world_objective=None, language=None, has_password=None, has_meteor=None, distribution_station_items=None, playtimes=None, discord_address=None, is_paused=None, active_and_online_players=None, peak_active_players=None, max_active_players=None, exhaustion_after_hours=None, is_limiting_hours=None, server_achievements=None, relay_address=None, access=None, join_url=None, _configuration=None):  # noqa: E501
        """EcoSharedNetworkingServerInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._address = None
        self._external = None
        self._game_port = None
        self._web_port = None
        self._is_lan = None
        self._description = None
        self._detailed_description = None
        self._category = None
        self._online_players = None
        self._total_players = None
        self._online_players_names = None
        self._admin_online = None
        self._time_since_start = None
        self._time_left = None
        self._animals = None
        self._plants = None
        self._laws = None
        self._world_size = None
        self._version = None
        self._economy_desc = None
        self._skill_specialization = None
        self._skill_specialization_setting = None
        self._world_objective = None
        self._language = None
        self._has_password = None
        self._has_meteor = None
        self._distribution_station_items = None
        self._playtimes = None
        self._discord_address = None
        self._is_paused = None
        self._active_and_online_players = None
        self._peak_active_players = None
        self._max_active_players = None
        self._exhaustion_after_hours = None
        self._is_limiting_hours = None
        self._server_achievements = None
        self._relay_address = None
        self._access = None
        self._join_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if external is not None:
            self.external = external
        if game_port is not None:
            self.game_port = game_port
        if web_port is not None:
            self.web_port = web_port
        if is_lan is not None:
            self.is_lan = is_lan
        if description is not None:
            self.description = description
        if detailed_description is not None:
            self.detailed_description = detailed_description
        if category is not None:
            self.category = category
        if online_players is not None:
            self.online_players = online_players
        if total_players is not None:
            self.total_players = total_players
        if online_players_names is not None:
            self.online_players_names = online_players_names
        if admin_online is not None:
            self.admin_online = admin_online
        if time_since_start is not None:
            self.time_since_start = time_since_start
        if time_left is not None:
            self.time_left = time_left
        if animals is not None:
            self.animals = animals
        if plants is not None:
            self.plants = plants
        if laws is not None:
            self.laws = laws
        if world_size is not None:
            self.world_size = world_size
        if version is not None:
            self.version = version
        if economy_desc is not None:
            self.economy_desc = economy_desc
        if skill_specialization is not None:
            self.skill_specialization = skill_specialization
        if skill_specialization_setting is not None:
            self.skill_specialization_setting = skill_specialization_setting
        if world_objective is not None:
            self.world_objective = world_objective
        if language is not None:
            self.language = language
        if has_password is not None:
            self.has_password = has_password
        if has_meteor is not None:
            self.has_meteor = has_meteor
        if distribution_station_items is not None:
            self.distribution_station_items = distribution_station_items
        if playtimes is not None:
            self.playtimes = playtimes
        if discord_address is not None:
            self.discord_address = discord_address
        if is_paused is not None:
            self.is_paused = is_paused
        if active_and_online_players is not None:
            self.active_and_online_players = active_and_online_players
        if peak_active_players is not None:
            self.peak_active_players = peak_active_players
        if max_active_players is not None:
            self.max_active_players = max_active_players
        if exhaustion_after_hours is not None:
            self.exhaustion_after_hours = exhaustion_after_hours
        if is_limiting_hours is not None:
            self.is_limiting_hours = is_limiting_hours
        if server_achievements is not None:
            self.server_achievements = server_achievements
        if relay_address is not None:
            self.relay_address = relay_address
        if access is not None:
            self.access = access
        if join_url is not None:
            self.join_url = join_url

    @property
    def id(self):
        """Gets the id of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The id of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcoSharedNetworkingServerInfo.


        :param id: The id of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The name of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EcoSharedNetworkingServerInfo.


        :param name: The name of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The address of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this EcoSharedNetworkingServerInfo.


        :param address: The address of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def external(self):
        """Gets the external of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The external of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this EcoSharedNetworkingServerInfo.


        :param external: The external of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: bool
        """

        self._external = external

    @property
    def game_port(self):
        """Gets the game_port of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The game_port of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._game_port

    @game_port.setter
    def game_port(self, game_port):
        """Sets the game_port of this EcoSharedNetworkingServerInfo.


        :param game_port: The game_port of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: int
        """

        self._game_port = game_port

    @property
    def web_port(self):
        """Gets the web_port of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The web_port of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._web_port

    @web_port.setter
    def web_port(self, web_port):
        """Sets the web_port of this EcoSharedNetworkingServerInfo.


        :param web_port: The web_port of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: int
        """

        self._web_port = web_port

    @property
    def is_lan(self):
        """Gets the is_lan of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The is_lan of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_lan

    @is_lan.setter
    def is_lan(self, is_lan):
        """Sets the is_lan of this EcoSharedNetworkingServerInfo.


        :param is_lan: The is_lan of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: bool
        """

        self._is_lan = is_lan

    @property
    def description(self):
        """Gets the description of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The description of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EcoSharedNetworkingServerInfo.


        :param description: The description of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def detailed_description(self):
        """Gets the detailed_description of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The detailed_description of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._detailed_description

    @detailed_description.setter
    def detailed_description(self, detailed_description):
        """Sets the detailed_description of this EcoSharedNetworkingServerInfo.


        :param detailed_description: The detailed_description of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._detailed_description = detailed_description

    @property
    def category(self):
        """Gets the category of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The category of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: EcoSharedStatesServerCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EcoSharedNetworkingServerInfo.


        :param category: The category of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: EcoSharedStatesServerCategory
        """

        self._category = category

    @property
    def online_players(self):
        """Gets the online_players of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The online_players of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._online_players

    @online_players.setter
    def online_players(self, online_players):
        """Sets the online_players of this EcoSharedNetworkingServerInfo.


        :param online_players: The online_players of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: int
        """

        self._online_players = online_players

    @property
    def total_players(self):
        """Gets the total_players of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The total_players of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_players

    @total_players.setter
    def total_players(self, total_players):
        """Sets the total_players of this EcoSharedNetworkingServerInfo.


        :param total_players: The total_players of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: int
        """

        self._total_players = total_players

    @property
    def online_players_names(self):
        """Gets the online_players_names of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The online_players_names of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._online_players_names

    @online_players_names.setter
    def online_players_names(self, online_players_names):
        """Sets the online_players_names of this EcoSharedNetworkingServerInfo.


        :param online_players_names: The online_players_names of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: list[str]
        """

        self._online_players_names = online_players_names

    @property
    def admin_online(self):
        """Gets the admin_online of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The admin_online of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._admin_online

    @admin_online.setter
    def admin_online(self, admin_online):
        """Sets the admin_online of this EcoSharedNetworkingServerInfo.


        :param admin_online: The admin_online of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: bool
        """

        self._admin_online = admin_online

    @property
    def time_since_start(self):
        """Gets the time_since_start of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The time_since_start of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: float
        """
        return self._time_since_start

    @time_since_start.setter
    def time_since_start(self, time_since_start):
        """Sets the time_since_start of this EcoSharedNetworkingServerInfo.


        :param time_since_start: The time_since_start of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: float
        """

        self._time_since_start = time_since_start

    @property
    def time_left(self):
        """Gets the time_left of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The time_left of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: float
        """
        return self._time_left

    @time_left.setter
    def time_left(self, time_left):
        """Sets the time_left of this EcoSharedNetworkingServerInfo.


        :param time_left: The time_left of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: float
        """

        self._time_left = time_left

    @property
    def animals(self):
        """Gets the animals of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The animals of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._animals

    @animals.setter
    def animals(self, animals):
        """Sets the animals of this EcoSharedNetworkingServerInfo.


        :param animals: The animals of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: int
        """

        self._animals = animals

    @property
    def plants(self):
        """Gets the plants of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The plants of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._plants

    @plants.setter
    def plants(self, plants):
        """Sets the plants of this EcoSharedNetworkingServerInfo.


        :param plants: The plants of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: int
        """

        self._plants = plants

    @property
    def laws(self):
        """Gets the laws of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The laws of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._laws

    @laws.setter
    def laws(self, laws):
        """Sets the laws of this EcoSharedNetworkingServerInfo.


        :param laws: The laws of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: int
        """

        self._laws = laws

    @property
    def world_size(self):
        """Gets the world_size of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The world_size of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._world_size

    @world_size.setter
    def world_size(self, world_size):
        """Sets the world_size of this EcoSharedNetworkingServerInfo.


        :param world_size: The world_size of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._world_size = world_size

    @property
    def version(self):
        """Gets the version of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The version of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EcoSharedNetworkingServerInfo.


        :param version: The version of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def economy_desc(self):
        """Gets the economy_desc of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The economy_desc of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._economy_desc

    @economy_desc.setter
    def economy_desc(self, economy_desc):
        """Sets the economy_desc of this EcoSharedNetworkingServerInfo.


        :param economy_desc: The economy_desc of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._economy_desc = economy_desc

    @property
    def skill_specialization(self):
        """Gets the skill_specialization of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The skill_specialization of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._skill_specialization

    @skill_specialization.setter
    def skill_specialization(self, skill_specialization):
        """Sets the skill_specialization of this EcoSharedNetworkingServerInfo.


        :param skill_specialization: The skill_specialization of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._skill_specialization = skill_specialization

    @property
    def skill_specialization_setting(self):
        """Gets the skill_specialization_setting of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The skill_specialization_setting of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: EcoSharedNetworkingSkillSpecializationSetting
        """
        return self._skill_specialization_setting

    @skill_specialization_setting.setter
    def skill_specialization_setting(self, skill_specialization_setting):
        """Sets the skill_specialization_setting of this EcoSharedNetworkingServerInfo.


        :param skill_specialization_setting: The skill_specialization_setting of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: EcoSharedNetworkingSkillSpecializationSetting
        """

        self._skill_specialization_setting = skill_specialization_setting

    @property
    def world_objective(self):
        """Gets the world_objective of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The world_objective of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._world_objective

    @world_objective.setter
    def world_objective(self, world_objective):
        """Sets the world_objective of this EcoSharedNetworkingServerInfo.


        :param world_objective: The world_objective of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._world_objective = world_objective

    @property
    def language(self):
        """Gets the language of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The language of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this EcoSharedNetworkingServerInfo.


        :param language: The language of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def has_password(self):
        """Gets the has_password of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The has_password of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this EcoSharedNetworkingServerInfo.


        :param has_password: The has_password of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: bool
        """

        self._has_password = has_password

    @property
    def has_meteor(self):
        """Gets the has_meteor of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The has_meteor of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_meteor

    @has_meteor.setter
    def has_meteor(self, has_meteor):
        """Sets the has_meteor of this EcoSharedNetworkingServerInfo.


        :param has_meteor: The has_meteor of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: bool
        """

        self._has_meteor = has_meteor

    @property
    def distribution_station_items(self):
        """Gets the distribution_station_items of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The distribution_station_items of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._distribution_station_items

    @distribution_station_items.setter
    def distribution_station_items(self, distribution_station_items):
        """Sets the distribution_station_items of this EcoSharedNetworkingServerInfo.


        :param distribution_station_items: The distribution_station_items of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._distribution_station_items = distribution_station_items

    @property
    def playtimes(self):
        """Gets the playtimes of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The playtimes of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._playtimes

    @playtimes.setter
    def playtimes(self, playtimes):
        """Sets the playtimes of this EcoSharedNetworkingServerInfo.


        :param playtimes: The playtimes of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._playtimes = playtimes

    @property
    def discord_address(self):
        """Gets the discord_address of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The discord_address of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._discord_address

    @discord_address.setter
    def discord_address(self, discord_address):
        """Sets the discord_address of this EcoSharedNetworkingServerInfo.


        :param discord_address: The discord_address of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._discord_address = discord_address

    @property
    def is_paused(self):
        """Gets the is_paused of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The is_paused of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this EcoSharedNetworkingServerInfo.


        :param is_paused: The is_paused of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: bool
        """

        self._is_paused = is_paused

    @property
    def active_and_online_players(self):
        """Gets the active_and_online_players of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The active_and_online_players of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._active_and_online_players

    @active_and_online_players.setter
    def active_and_online_players(self, active_and_online_players):
        """Sets the active_and_online_players of this EcoSharedNetworkingServerInfo.


        :param active_and_online_players: The active_and_online_players of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: int
        """

        self._active_and_online_players = active_and_online_players

    @property
    def peak_active_players(self):
        """Gets the peak_active_players of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The peak_active_players of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._peak_active_players

    @peak_active_players.setter
    def peak_active_players(self, peak_active_players):
        """Sets the peak_active_players of this EcoSharedNetworkingServerInfo.


        :param peak_active_players: The peak_active_players of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: int
        """

        self._peak_active_players = peak_active_players

    @property
    def max_active_players(self):
        """Gets the max_active_players of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The max_active_players of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_active_players

    @max_active_players.setter
    def max_active_players(self, max_active_players):
        """Sets the max_active_players of this EcoSharedNetworkingServerInfo.


        :param max_active_players: The max_active_players of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: int
        """

        self._max_active_players = max_active_players

    @property
    def exhaustion_after_hours(self):
        """Gets the exhaustion_after_hours of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The exhaustion_after_hours of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: float
        """
        return self._exhaustion_after_hours

    @exhaustion_after_hours.setter
    def exhaustion_after_hours(self, exhaustion_after_hours):
        """Sets the exhaustion_after_hours of this EcoSharedNetworkingServerInfo.


        :param exhaustion_after_hours: The exhaustion_after_hours of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: float
        """

        self._exhaustion_after_hours = exhaustion_after_hours

    @property
    def is_limiting_hours(self):
        """Gets the is_limiting_hours of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The is_limiting_hours of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_limiting_hours

    @is_limiting_hours.setter
    def is_limiting_hours(self, is_limiting_hours):
        """Sets the is_limiting_hours of this EcoSharedNetworkingServerInfo.


        :param is_limiting_hours: The is_limiting_hours of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: bool
        """

        self._is_limiting_hours = is_limiting_hours

    @property
    def server_achievements(self):
        """Gets the server_achievements of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The server_achievements of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._server_achievements

    @server_achievements.setter
    def server_achievements(self, server_achievements):
        """Sets the server_achievements of this EcoSharedNetworkingServerInfo.


        :param server_achievements: The server_achievements of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: list[str]
        """

        self._server_achievements = server_achievements

    @property
    def relay_address(self):
        """Gets the relay_address of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The relay_address of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._relay_address

    @relay_address.setter
    def relay_address(self, relay_address):
        """Sets the relay_address of this EcoSharedNetworkingServerInfo.


        :param relay_address: The relay_address of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._relay_address = relay_address

    @property
    def access(self):
        """Gets the access of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The access of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this EcoSharedNetworkingServerInfo.


        :param access: The access of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._access = access

    @property
    def join_url(self):
        """Gets the join_url of this EcoSharedNetworkingServerInfo.  # noqa: E501


        :return: The join_url of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this EcoSharedNetworkingServerInfo.


        :param join_url: The join_url of this EcoSharedNetworkingServerInfo.  # noqa: E501
        :type: str
        """

        self._join_url = join_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcoSharedNetworkingServerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcoSharedNetworkingServerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcoSharedNetworkingServerInfo):
            return True

        return self.to_dict() != other.to_dict()
