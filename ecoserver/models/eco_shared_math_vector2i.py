# coding: utf-8

"""
    Eco Game API

    First API draft for Eco. Heavy work in progress and subject to changes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ecoserver.configuration import Configuration


class EcoSharedMathVector2i(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x': 'int',
        'y': 'int',
        'length': 'float',
        'magnitude': 'float',
        'magnitude_sq': 'float',
        'area': 'int',
        'neighbors_adjacent': 'list[EcoSharedMathVector2i]',
        'neighbors_diagonal': 'list[EcoSharedMathVector2i]'
    }

    attribute_map = {
        'x': 'x',
        'y': 'y',
        'length': 'length',
        'magnitude': 'magnitude',
        'magnitude_sq': 'magnitudeSq',
        'area': 'area',
        'neighbors_adjacent': 'neighborsAdjacent',
        'neighbors_diagonal': 'neighborsDiagonal'
    }

    def __init__(self, x=None, y=None, length=None, magnitude=None, magnitude_sq=None, area=None, neighbors_adjacent=None, neighbors_diagonal=None, _configuration=None):  # noqa: E501
        """EcoSharedMathVector2i - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._x = None
        self._y = None
        self._length = None
        self._magnitude = None
        self._magnitude_sq = None
        self._area = None
        self._neighbors_adjacent = None
        self._neighbors_diagonal = None
        self.discriminator = None

        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if length is not None:
            self.length = length
        if magnitude is not None:
            self.magnitude = magnitude
        if magnitude_sq is not None:
            self.magnitude_sq = magnitude_sq
        if area is not None:
            self.area = area
        if neighbors_adjacent is not None:
            self.neighbors_adjacent = neighbors_adjacent
        if neighbors_diagonal is not None:
            self.neighbors_diagonal = neighbors_diagonal

    @property
    def x(self):
        """Gets the x of this EcoSharedMathVector2i.  # noqa: E501


        :return: The x of this EcoSharedMathVector2i.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this EcoSharedMathVector2i.


        :param x: The x of this EcoSharedMathVector2i.  # noqa: E501
        :type: int
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this EcoSharedMathVector2i.  # noqa: E501


        :return: The y of this EcoSharedMathVector2i.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this EcoSharedMathVector2i.


        :param y: The y of this EcoSharedMathVector2i.  # noqa: E501
        :type: int
        """

        self._y = y

    @property
    def length(self):
        """Gets the length of this EcoSharedMathVector2i.  # noqa: E501


        :return: The length of this EcoSharedMathVector2i.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this EcoSharedMathVector2i.


        :param length: The length of this EcoSharedMathVector2i.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def magnitude(self):
        """Gets the magnitude of this EcoSharedMathVector2i.  # noqa: E501


        :return: The magnitude of this EcoSharedMathVector2i.  # noqa: E501
        :rtype: float
        """
        return self._magnitude

    @magnitude.setter
    def magnitude(self, magnitude):
        """Sets the magnitude of this EcoSharedMathVector2i.


        :param magnitude: The magnitude of this EcoSharedMathVector2i.  # noqa: E501
        :type: float
        """

        self._magnitude = magnitude

    @property
    def magnitude_sq(self):
        """Gets the magnitude_sq of this EcoSharedMathVector2i.  # noqa: E501


        :return: The magnitude_sq of this EcoSharedMathVector2i.  # noqa: E501
        :rtype: float
        """
        return self._magnitude_sq

    @magnitude_sq.setter
    def magnitude_sq(self, magnitude_sq):
        """Sets the magnitude_sq of this EcoSharedMathVector2i.


        :param magnitude_sq: The magnitude_sq of this EcoSharedMathVector2i.  # noqa: E501
        :type: float
        """

        self._magnitude_sq = magnitude_sq

    @property
    def area(self):
        """Gets the area of this EcoSharedMathVector2i.  # noqa: E501


        :return: The area of this EcoSharedMathVector2i.  # noqa: E501
        :rtype: int
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this EcoSharedMathVector2i.


        :param area: The area of this EcoSharedMathVector2i.  # noqa: E501
        :type: int
        """

        self._area = area

    @property
    def neighbors_adjacent(self):
        """Gets the neighbors_adjacent of this EcoSharedMathVector2i.  # noqa: E501


        :return: The neighbors_adjacent of this EcoSharedMathVector2i.  # noqa: E501
        :rtype: list[EcoSharedMathVector2i]
        """
        return self._neighbors_adjacent

    @neighbors_adjacent.setter
    def neighbors_adjacent(self, neighbors_adjacent):
        """Sets the neighbors_adjacent of this EcoSharedMathVector2i.


        :param neighbors_adjacent: The neighbors_adjacent of this EcoSharedMathVector2i.  # noqa: E501
        :type: list[EcoSharedMathVector2i]
        """

        self._neighbors_adjacent = neighbors_adjacent

    @property
    def neighbors_diagonal(self):
        """Gets the neighbors_diagonal of this EcoSharedMathVector2i.  # noqa: E501


        :return: The neighbors_diagonal of this EcoSharedMathVector2i.  # noqa: E501
        :rtype: list[EcoSharedMathVector2i]
        """
        return self._neighbors_diagonal

    @neighbors_diagonal.setter
    def neighbors_diagonal(self, neighbors_diagonal):
        """Sets the neighbors_diagonal of this EcoSharedMathVector2i.


        :param neighbors_diagonal: The neighbors_diagonal of this EcoSharedMathVector2i.  # noqa: E501
        :type: list[EcoSharedMathVector2i]
        """

        self._neighbors_diagonal = neighbors_diagonal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcoSharedMathVector2i, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcoSharedMathVector2i):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcoSharedMathVector2i):
            return True

        return self.to_dict() != other.to_dict()
