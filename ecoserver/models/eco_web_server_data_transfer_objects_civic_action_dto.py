# coding: utf-8

"""
    Eco Game API

    First API draft for Eco. Heavy work in progress and subject to changes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ecoserver.configuration import Configuration


class EcoWebServerDataTransferObjectsCivicActionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_on_complete': 'str',
        'action_on_complete_table_header': 'str',
        'action_on_complete_table': 'list[object]',
        'action_on_complete_full_description': 'str',
        'district_map_before': 'EcoWebServerDataTransferObjectsMapDTO',
        'district_map_after': 'EcoWebServerDataTransferObjectsMapDTO'
    }

    attribute_map = {
        'action_on_complete': 'actionOnComplete',
        'action_on_complete_table_header': 'actionOnCompleteTableHeader',
        'action_on_complete_table': 'actionOnCompleteTable',
        'action_on_complete_full_description': 'actionOnCompleteFullDescription',
        'district_map_before': 'districtMapBefore',
        'district_map_after': 'districtMapAfter'
    }

    def __init__(self, action_on_complete=None, action_on_complete_table_header=None, action_on_complete_table=None, action_on_complete_full_description=None, district_map_before=None, district_map_after=None, _configuration=None):  # noqa: E501
        """EcoWebServerDataTransferObjectsCivicActionDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action_on_complete = None
        self._action_on_complete_table_header = None
        self._action_on_complete_table = None
        self._action_on_complete_full_description = None
        self._district_map_before = None
        self._district_map_after = None
        self.discriminator = None

        if action_on_complete is not None:
            self.action_on_complete = action_on_complete
        if action_on_complete_table_header is not None:
            self.action_on_complete_table_header = action_on_complete_table_header
        if action_on_complete_table is not None:
            self.action_on_complete_table = action_on_complete_table
        if action_on_complete_full_description is not None:
            self.action_on_complete_full_description = action_on_complete_full_description
        if district_map_before is not None:
            self.district_map_before = district_map_before
        if district_map_after is not None:
            self.district_map_after = district_map_after

    @property
    def action_on_complete(self):
        """Gets the action_on_complete of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501


        :return: The action_on_complete of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :rtype: str
        """
        return self._action_on_complete

    @action_on_complete.setter
    def action_on_complete(self, action_on_complete):
        """Sets the action_on_complete of this EcoWebServerDataTransferObjectsCivicActionDTO.


        :param action_on_complete: The action_on_complete of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :type: str
        """

        self._action_on_complete = action_on_complete

    @property
    def action_on_complete_table_header(self):
        """Gets the action_on_complete_table_header of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501


        :return: The action_on_complete_table_header of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :rtype: str
        """
        return self._action_on_complete_table_header

    @action_on_complete_table_header.setter
    def action_on_complete_table_header(self, action_on_complete_table_header):
        """Sets the action_on_complete_table_header of this EcoWebServerDataTransferObjectsCivicActionDTO.


        :param action_on_complete_table_header: The action_on_complete_table_header of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :type: str
        """

        self._action_on_complete_table_header = action_on_complete_table_header

    @property
    def action_on_complete_table(self):
        """Gets the action_on_complete_table of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501


        :return: The action_on_complete_table of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :rtype: list[object]
        """
        return self._action_on_complete_table

    @action_on_complete_table.setter
    def action_on_complete_table(self, action_on_complete_table):
        """Sets the action_on_complete_table of this EcoWebServerDataTransferObjectsCivicActionDTO.


        :param action_on_complete_table: The action_on_complete_table of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :type: list[object]
        """

        self._action_on_complete_table = action_on_complete_table

    @property
    def action_on_complete_full_description(self):
        """Gets the action_on_complete_full_description of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501


        :return: The action_on_complete_full_description of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :rtype: str
        """
        return self._action_on_complete_full_description

    @action_on_complete_full_description.setter
    def action_on_complete_full_description(self, action_on_complete_full_description):
        """Sets the action_on_complete_full_description of this EcoWebServerDataTransferObjectsCivicActionDTO.


        :param action_on_complete_full_description: The action_on_complete_full_description of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :type: str
        """

        self._action_on_complete_full_description = action_on_complete_full_description

    @property
    def district_map_before(self):
        """Gets the district_map_before of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501


        :return: The district_map_before of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :rtype: EcoWebServerDataTransferObjectsMapDTO
        """
        return self._district_map_before

    @district_map_before.setter
    def district_map_before(self, district_map_before):
        """Sets the district_map_before of this EcoWebServerDataTransferObjectsCivicActionDTO.


        :param district_map_before: The district_map_before of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :type: EcoWebServerDataTransferObjectsMapDTO
        """

        self._district_map_before = district_map_before

    @property
    def district_map_after(self):
        """Gets the district_map_after of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501


        :return: The district_map_after of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :rtype: EcoWebServerDataTransferObjectsMapDTO
        """
        return self._district_map_after

    @district_map_after.setter
    def district_map_after(self, district_map_after):
        """Sets the district_map_after of this EcoWebServerDataTransferObjectsCivicActionDTO.


        :param district_map_after: The district_map_after of this EcoWebServerDataTransferObjectsCivicActionDTO.  # noqa: E501
        :type: EcoWebServerDataTransferObjectsMapDTO
        """

        self._district_map_after = district_map_after

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcoWebServerDataTransferObjectsCivicActionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsCivicActionDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsCivicActionDTO):
            return True

        return self.to_dict() != other.to_dict()
