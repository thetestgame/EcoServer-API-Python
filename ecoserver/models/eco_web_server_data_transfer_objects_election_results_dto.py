# coding: utf-8

"""
    Eco Game API

    First API draft for Eco. Heavy work in progress and subject to changes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ecoserver.configuration import Configuration


class EcoWebServerDataTransferObjectsElectionResultsDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'choice_ranks': 'list[EcoGameplayCivicsElectionsChoiceResults]',
        'total_votes_for_winner': 'int',
        'winners': 'list[str]',
        'result': 'str',
        'finished': 'bool'
    }

    attribute_map = {
        'choice_ranks': 'choiceRanks',
        'total_votes_for_winner': 'totalVotesForWinner',
        'winners': 'winners',
        'result': 'result',
        'finished': 'finished'
    }

    def __init__(self, choice_ranks=None, total_votes_for_winner=None, winners=None, result=None, finished=None, _configuration=None):  # noqa: E501
        """EcoWebServerDataTransferObjectsElectionResultsDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._choice_ranks = None
        self._total_votes_for_winner = None
        self._winners = None
        self._result = None
        self._finished = None
        self.discriminator = None

        if choice_ranks is not None:
            self.choice_ranks = choice_ranks
        if total_votes_for_winner is not None:
            self.total_votes_for_winner = total_votes_for_winner
        if winners is not None:
            self.winners = winners
        if result is not None:
            self.result = result
        if finished is not None:
            self.finished = finished

    @property
    def choice_ranks(self):
        """Gets the choice_ranks of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501


        :return: The choice_ranks of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501
        :rtype: list[EcoGameplayCivicsElectionsChoiceResults]
        """
        return self._choice_ranks

    @choice_ranks.setter
    def choice_ranks(self, choice_ranks):
        """Sets the choice_ranks of this EcoWebServerDataTransferObjectsElectionResultsDTO.


        :param choice_ranks: The choice_ranks of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501
        :type: list[EcoGameplayCivicsElectionsChoiceResults]
        """

        self._choice_ranks = choice_ranks

    @property
    def total_votes_for_winner(self):
        """Gets the total_votes_for_winner of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501


        :return: The total_votes_for_winner of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501
        :rtype: int
        """
        return self._total_votes_for_winner

    @total_votes_for_winner.setter
    def total_votes_for_winner(self, total_votes_for_winner):
        """Sets the total_votes_for_winner of this EcoWebServerDataTransferObjectsElectionResultsDTO.


        :param total_votes_for_winner: The total_votes_for_winner of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501
        :type: int
        """

        self._total_votes_for_winner = total_votes_for_winner

    @property
    def winners(self):
        """Gets the winners of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501


        :return: The winners of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._winners

    @winners.setter
    def winners(self, winners):
        """Sets the winners of this EcoWebServerDataTransferObjectsElectionResultsDTO.


        :param winners: The winners of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501
        :type: list[str]
        """

        self._winners = winners

    @property
    def result(self):
        """Gets the result of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501


        :return: The result of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this EcoWebServerDataTransferObjectsElectionResultsDTO.


        :param result: The result of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def finished(self):
        """Gets the finished of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501


        :return: The finished of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this EcoWebServerDataTransferObjectsElectionResultsDTO.


        :param finished: The finished of this EcoWebServerDataTransferObjectsElectionResultsDTO.  # noqa: E501
        :type: bool
        """

        self._finished = finished

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcoWebServerDataTransferObjectsElectionResultsDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsElectionResultsDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsElectionResultsDTO):
            return True

        return self.to_dict() != other.to_dict()
