# coding: utf-8

"""
    Eco Game API

    First API draft for Eco. Heavy work in progress and subject to changes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ecoserver.configuration import Configuration


class EcoWebServerDataTransferObjectsElectionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'user_description': 'str',
        'state': 'str',
        'creator': 'str',
        'choices': 'list[EcoWebServerDataTransferObjectsElectionChoiceDTO]',
        'total_votes': 'int',
        'time_end': 'float',
        'time_end_ago': 'float',
        'time_start': 'float',
        'time_start_ago': 'float',
        'finished': 'bool',
        'passed': 'bool',
        'pending_vote': 'bool',
        'comments': 'list[EcoWebServerDataTransferObjectsElectionCommentDTO]',
        'provisions': 'list[EcoWebServerDataTransferObjectsCivicActionDTO]',
        'results': 'EcoWebServerDataTransferObjectsElectionResultsDTO',
        'election_process': 'EcoWebServerDataTransferObjectsElectionProcessDTO',
        'position_for_winner': 'EcoWebServerDataTransferObjectsElectedTitleDTO',
        'boolean_election': 'bool',
        'election_description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'user_description': 'userDescription',
        'state': 'state',
        'creator': 'creator',
        'choices': 'choices',
        'total_votes': 'totalVotes',
        'time_end': 'timeEnd',
        'time_end_ago': 'timeEndAgo',
        'time_start': 'timeStart',
        'time_start_ago': 'timeStartAgo',
        'finished': 'finished',
        'passed': 'passed',
        'pending_vote': 'pendingVote',
        'comments': 'comments',
        'provisions': 'provisions',
        'results': 'results',
        'election_process': 'electionProcess',
        'position_for_winner': 'positionForWinner',
        'boolean_election': 'booleanElection',
        'election_description': 'electionDescription'
    }

    def __init__(self, id=None, name=None, user_description=None, state=None, creator=None, choices=None, total_votes=None, time_end=None, time_end_ago=None, time_start=None, time_start_ago=None, finished=None, passed=None, pending_vote=None, comments=None, provisions=None, results=None, election_process=None, position_for_winner=None, boolean_election=None, election_description=None, _configuration=None):  # noqa: E501
        """EcoWebServerDataTransferObjectsElectionDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._user_description = None
        self._state = None
        self._creator = None
        self._choices = None
        self._total_votes = None
        self._time_end = None
        self._time_end_ago = None
        self._time_start = None
        self._time_start_ago = None
        self._finished = None
        self._passed = None
        self._pending_vote = None
        self._comments = None
        self._provisions = None
        self._results = None
        self._election_process = None
        self._position_for_winner = None
        self._boolean_election = None
        self._election_description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if user_description is not None:
            self.user_description = user_description
        if state is not None:
            self.state = state
        if creator is not None:
            self.creator = creator
        if choices is not None:
            self.choices = choices
        if total_votes is not None:
            self.total_votes = total_votes
        if time_end is not None:
            self.time_end = time_end
        if time_end_ago is not None:
            self.time_end_ago = time_end_ago
        if time_start is not None:
            self.time_start = time_start
        if time_start_ago is not None:
            self.time_start_ago = time_start_ago
        if finished is not None:
            self.finished = finished
        if passed is not None:
            self.passed = passed
        if pending_vote is not None:
            self.pending_vote = pending_vote
        if comments is not None:
            self.comments = comments
        if provisions is not None:
            self.provisions = provisions
        if results is not None:
            self.results = results
        if election_process is not None:
            self.election_process = election_process
        if position_for_winner is not None:
            self.position_for_winner = position_for_winner
        if boolean_election is not None:
            self.boolean_election = boolean_election
        if election_description is not None:
            self.election_description = election_description

    @property
    def id(self):
        """Gets the id of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The id of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcoWebServerDataTransferObjectsElectionDTO.


        :param id: The id of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The name of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EcoWebServerDataTransferObjectsElectionDTO.


        :param name: The name of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_description(self):
        """Gets the user_description of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The user_description of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_description

    @user_description.setter
    def user_description(self, user_description):
        """Sets the user_description of this EcoWebServerDataTransferObjectsElectionDTO.


        :param user_description: The user_description of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: str
        """

        self._user_description = user_description

    @property
    def state(self):
        """Gets the state of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The state of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EcoWebServerDataTransferObjectsElectionDTO.


        :param state: The state of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def creator(self):
        """Gets the creator of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The creator of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this EcoWebServerDataTransferObjectsElectionDTO.


        :param creator: The creator of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def choices(self):
        """Gets the choices of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The choices of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: list[EcoWebServerDataTransferObjectsElectionChoiceDTO]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this EcoWebServerDataTransferObjectsElectionDTO.


        :param choices: The choices of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: list[EcoWebServerDataTransferObjectsElectionChoiceDTO]
        """

        self._choices = choices

    @property
    def total_votes(self):
        """Gets the total_votes of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The total_votes of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: int
        """
        return self._total_votes

    @total_votes.setter
    def total_votes(self, total_votes):
        """Sets the total_votes of this EcoWebServerDataTransferObjectsElectionDTO.


        :param total_votes: The total_votes of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: int
        """

        self._total_votes = total_votes

    @property
    def time_end(self):
        """Gets the time_end of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The time_end of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: float
        """
        return self._time_end

    @time_end.setter
    def time_end(self, time_end):
        """Sets the time_end of this EcoWebServerDataTransferObjectsElectionDTO.


        :param time_end: The time_end of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: float
        """

        self._time_end = time_end

    @property
    def time_end_ago(self):
        """Gets the time_end_ago of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The time_end_ago of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: float
        """
        return self._time_end_ago

    @time_end_ago.setter
    def time_end_ago(self, time_end_ago):
        """Sets the time_end_ago of this EcoWebServerDataTransferObjectsElectionDTO.


        :param time_end_ago: The time_end_ago of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: float
        """

        self._time_end_ago = time_end_ago

    @property
    def time_start(self):
        """Gets the time_start of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The time_start of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: float
        """
        return self._time_start

    @time_start.setter
    def time_start(self, time_start):
        """Sets the time_start of this EcoWebServerDataTransferObjectsElectionDTO.


        :param time_start: The time_start of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: float
        """

        self._time_start = time_start

    @property
    def time_start_ago(self):
        """Gets the time_start_ago of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The time_start_ago of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: float
        """
        return self._time_start_ago

    @time_start_ago.setter
    def time_start_ago(self, time_start_ago):
        """Sets the time_start_ago of this EcoWebServerDataTransferObjectsElectionDTO.


        :param time_start_ago: The time_start_ago of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: float
        """

        self._time_start_ago = time_start_ago

    @property
    def finished(self):
        """Gets the finished of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The finished of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this EcoWebServerDataTransferObjectsElectionDTO.


        :param finished: The finished of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: bool
        """

        self._finished = finished

    @property
    def passed(self):
        """Gets the passed of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The passed of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this EcoWebServerDataTransferObjectsElectionDTO.


        :param passed: The passed of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: bool
        """

        self._passed = passed

    @property
    def pending_vote(self):
        """Gets the pending_vote of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The pending_vote of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._pending_vote

    @pending_vote.setter
    def pending_vote(self, pending_vote):
        """Sets the pending_vote of this EcoWebServerDataTransferObjectsElectionDTO.


        :param pending_vote: The pending_vote of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: bool
        """

        self._pending_vote = pending_vote

    @property
    def comments(self):
        """Gets the comments of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The comments of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: list[EcoWebServerDataTransferObjectsElectionCommentDTO]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EcoWebServerDataTransferObjectsElectionDTO.


        :param comments: The comments of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: list[EcoWebServerDataTransferObjectsElectionCommentDTO]
        """

        self._comments = comments

    @property
    def provisions(self):
        """Gets the provisions of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The provisions of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: list[EcoWebServerDataTransferObjectsCivicActionDTO]
        """
        return self._provisions

    @provisions.setter
    def provisions(self, provisions):
        """Sets the provisions of this EcoWebServerDataTransferObjectsElectionDTO.


        :param provisions: The provisions of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: list[EcoWebServerDataTransferObjectsCivicActionDTO]
        """

        self._provisions = provisions

    @property
    def results(self):
        """Gets the results of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The results of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: EcoWebServerDataTransferObjectsElectionResultsDTO
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this EcoWebServerDataTransferObjectsElectionDTO.


        :param results: The results of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: EcoWebServerDataTransferObjectsElectionResultsDTO
        """

        self._results = results

    @property
    def election_process(self):
        """Gets the election_process of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The election_process of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: EcoWebServerDataTransferObjectsElectionProcessDTO
        """
        return self._election_process

    @election_process.setter
    def election_process(self, election_process):
        """Sets the election_process of this EcoWebServerDataTransferObjectsElectionDTO.


        :param election_process: The election_process of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: EcoWebServerDataTransferObjectsElectionProcessDTO
        """

        self._election_process = election_process

    @property
    def position_for_winner(self):
        """Gets the position_for_winner of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The position_for_winner of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: EcoWebServerDataTransferObjectsElectedTitleDTO
        """
        return self._position_for_winner

    @position_for_winner.setter
    def position_for_winner(self, position_for_winner):
        """Sets the position_for_winner of this EcoWebServerDataTransferObjectsElectionDTO.


        :param position_for_winner: The position_for_winner of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: EcoWebServerDataTransferObjectsElectedTitleDTO
        """

        self._position_for_winner = position_for_winner

    @property
    def boolean_election(self):
        """Gets the boolean_election of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The boolean_election of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._boolean_election

    @boolean_election.setter
    def boolean_election(self, boolean_election):
        """Sets the boolean_election of this EcoWebServerDataTransferObjectsElectionDTO.


        :param boolean_election: The boolean_election of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: bool
        """

        self._boolean_election = boolean_election

    @property
    def election_description(self):
        """Gets the election_description of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501


        :return: The election_description of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._election_description

    @election_description.setter
    def election_description(self, election_description):
        """Sets the election_description of this EcoWebServerDataTransferObjectsElectionDTO.


        :param election_description: The election_description of this EcoWebServerDataTransferObjectsElectionDTO.  # noqa: E501
        :type: str
        """

        self._election_description = election_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcoWebServerDataTransferObjectsElectionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsElectionDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsElectionDTO):
            return True

        return self.to_dict() != other.to_dict()
