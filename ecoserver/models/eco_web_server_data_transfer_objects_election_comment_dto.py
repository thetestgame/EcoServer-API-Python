# coding: utf-8

"""
    Eco Game API

    First API draft for Eco. Heavy work in progress and subject to changes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ecoserver.configuration import Configuration


class EcoWebServerDataTransferObjectsElectionCommentDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'text': 'str',
        'graph': 'EcoStatsGraph',
        'map': 'EcoWebServerDataTransferObjectsMapDTO',
        'timestamp': 'float'
    }

    attribute_map = {
        'username': 'username',
        'text': 'text',
        'graph': 'graph',
        'map': 'map',
        'timestamp': 'timestamp'
    }

    def __init__(self, username=None, text=None, graph=None, map=None, timestamp=None, _configuration=None):  # noqa: E501
        """EcoWebServerDataTransferObjectsElectionCommentDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._username = None
        self._text = None
        self._graph = None
        self._map = None
        self._timestamp = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if text is not None:
            self.text = text
        if graph is not None:
            self.graph = graph
        if map is not None:
            self.map = map
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def username(self):
        """Gets the username of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501


        :return: The username of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EcoWebServerDataTransferObjectsElectionCommentDTO.


        :param username: The username of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def text(self):
        """Gets the text of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501


        :return: The text of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this EcoWebServerDataTransferObjectsElectionCommentDTO.


        :param text: The text of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def graph(self):
        """Gets the graph of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501


        :return: The graph of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501
        :rtype: EcoStatsGraph
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """Sets the graph of this EcoWebServerDataTransferObjectsElectionCommentDTO.


        :param graph: The graph of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501
        :type: EcoStatsGraph
        """

        self._graph = graph

    @property
    def map(self):
        """Gets the map of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501


        :return: The map of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501
        :rtype: EcoWebServerDataTransferObjectsMapDTO
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this EcoWebServerDataTransferObjectsElectionCommentDTO.


        :param map: The map of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501
        :type: EcoWebServerDataTransferObjectsMapDTO
        """

        self._map = map

    @property
    def timestamp(self):
        """Gets the timestamp of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501


        :return: The timestamp of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EcoWebServerDataTransferObjectsElectionCommentDTO.


        :param timestamp: The timestamp of this EcoWebServerDataTransferObjectsElectionCommentDTO.  # noqa: E501
        :type: float
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcoWebServerDataTransferObjectsElectionCommentDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsElectionCommentDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcoWebServerDataTransferObjectsElectionCommentDTO):
            return True

        return self.to_dict() != other.to_dict()
